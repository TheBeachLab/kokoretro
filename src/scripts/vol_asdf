#!/usr/bin/env python
import sys
import os

HELP = '''command line:  vol_asdf [-m M] input.vol output.asdf ni nj nk density mm/voxel
   input.vol   = input .vol file
   output.asdf = output asdf file
   ni, nj, nk  = dimensions along x, y, and z axes
   density     = value at which to threshold
   mm/voxel    = voxel side length in mm
   
   Options:
   -m M     Generate a multi-resolution ASDF with M levels'''

if len(sys.argv) < 8 or len(sys.argv) > 11:
    print HELP
    sys.exit()

if sys.argv[1] == '-m':
    try:
        multires = int(sys.argv[2])
    except:
        sys.stderr.write(
            'vol_asdf error: M must be an integer.\n'
        )
        sys.exit(1)
    sys.argv = sys.argv[0:1] + sys.argv[3:]
else:
    multires = None
    

try:
    ni, nj, nk = map(int, sys.argv[3:6])
except ValueError:
    sys.stderr.write(
        'vol_asdf error: ni, nj, nk must be integers.\n')
    sys.exit(1)

try:
    density    = float(sys.argv[6])
    mm_per_vox = float(sys.argv[7])
except ValueError:
    sys.stderr.write(
        'vol_asdf error: density and mm/voxel must be floating-point values\n.')
    sys.exit(1)

try:
    shift = int(sys.argv[8])
except IndexError:
    shift = None
except ValueError:
    sys.stderr.write(
        'vol_asdf error: invalid shift value (must be integer)')
    sys.exit(1)

try:
    size = os.path.getsize(sys.argv[1])
except os.error:
    sys.stderr.write(
        "vol_asdf error: Can't find input file %s\n." % sys.argv[1]) 
    sys.exit(1)
else:
    if size != ni*nj*nk*4:
        sys.stderr.write(
            "vol_asdf error: File size doesn't match provided dimensions.\n")
        sys.exit(1)


from koko.fab.asdf import ASDF

from koko.c.region import Region
from koko.c.libfab import libfab

if multires is None:
    print "Importing .vol file... ",
    sys.stdout.flush()
    asdf = ASDF.from_vol(sys.argv[1], ni, nj, nk, density, mm_per_vox, shift)

    print "Done.\nSaving .asdf file...   ",
    sys.stdout.flush()
    asdf.save(sys.argv[2])
else:
    r = Region(
        (0, 0, 0),
        (ni*mm_per_vox, nj*mm_per_vox, nk*mm_per_vox),
        1/mm_per_vox
    )
    
    def subdivide(r, m):
        if m == 0:
            return [r], ['']
        else:
            subregions = []
            suffixes = []
            
            for r, f in zip(*subdivide(r, m-1)):
                subregions += r.octsect()
                suffixes += [f+str(i) for i in range(8)]
            
            return subregions, suffixes
    
    for m in range(multires+1):
        subregions, suffixes = subdivide(r, m)
        
        for subregion, suffix in zip(subregions, suffixes):
            print (
                "Loading region with suffix '%s' and shift %i" %
                (suffix, multires-m)
            )
            
            asdf = ASDF(
                libfab.import_vol_region(
                    sys.argv[1], ni, nj, nk, subregion,
                    multires - m, density, True
                )
            )
            
            filename = sys.argv[2].replace('.asdf','_%s.asdf' % suffix) 
            print '    Saving to file %s.' % filename
            asdf.save(filename)


print "Done."