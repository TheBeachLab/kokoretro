#!/usr/bin/env python
import sys

print '\r'+' '*80+'\r[|---------]    importing os',
sys.stdout.flush()
import os
        
print '\r'+' '*80+'\r[||--------]    importing wx',
sys.stdout.flush()
try:
    import wx
except ImportError:
    print "kokopelli error: wx import failed!"
    sys.exit(1)
print '\r'+' '*80+'\r[|||||-----]    importing koko',
sys.stdout.flush()


import koko

koko.BASE_DIR = os.path.abspath(os.getcwd())+'/'
if '.app' in sys.argv[0]:
    koko.BUNDLED = True
    sys.path.append('')
    os.chdir(koko.BASE_DIR+'../../..')
else:
    koko.BUNDLED = False

retro = False
new   = False
while len(sys.argv) > 1:
    if sys.argv[1] == '--debug':
        import subprocess
        python = 'python-64' if 'Darwin' in os.uname() else 'python'
        subprocess.call(['gdb', '--quiet',
                         '--eval-command',
                         'run %s %s' % (sys.argv[0], ' '.join(sys.argv[2:])),
                         '--eval-command', 'cont',
                         '--eval-command', 'quit', python])
        sys.exit(0)
    elif sys.argv[1] in ['--retro','-r']:
        if koko.BUNDLED:
            print 'Retro mode disabled in bundled application.'
        else:
            retro = True
        sys.argv = [sys.argv[0]] + sys.argv[2:]
    elif sys.argv[1] in ['--new', '-n']:
        new = True
        sys.argv = [sys.argv[0]] + sys.argv[2:]
    elif sys.argv[1] in ['--help', '-h']:
        print '''Usage:
  kokopelli [--retro|-r] [--new|-n] [--help|-h] [FILENAME]'
  
  Options:
    --retro   Use old math engine
                (Bitfield colors and infix notation,
                 no multi-object rendering or automatic bounds)
    --new     Use new math engine; opposite of --retro
                (if both are provided, --new overrides --retro)
    --help    Print this message and exit

  Arguments:
    FILENAME    Target file to open'''
        sys.exit(0)
    else:
        break

# Attempt to automatically detect retro files by looking
# for the pattern "cad.[xyz](min|max)="
if len(sys.argv) >= 2 and os.path.exists(sys.argv[1]) and not new:
    import re
    with open(sys.argv[1]) as f:
        if re.search('cad\.[xyz](min|max)\s*=', f.read()):
            if koko.BUNDLED:
                print 'Retro file detected, but retro mode is disabled',
                print 'in bundled application.\nOpening in new mode.'
            else:
                print 'Retro file detected (override with --new)'
                retro = True


print '\r'+' '*80+'\r[||||||----]    importing koko.app',
sys.stdout.flush()
if retro and not new:
    from koko.retro.app import App
else:
    from koko.app import App
    

if __name__ == '__main__':
    print '\r'+' '*80+'\r[||||||||||]    starting...',
    sys.stdout.flush()
    wx.Log.EnableLogging(False)
    app = App()
    print '\r'+' '*80+'\r',
    sys.stdout.flush()
    app.MainLoop()
